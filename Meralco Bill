import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MeralcoBillGUI extends JFrame {
    private JTextField accountNumberField;
    private JTextField firstNameField;
    private JTextField lastNameField;
    private JTextField yearField;
    private JTextField monthField;
    private JTextField dayField;
    private JTextField previousKwhField;
    private JTextField presentKwhField;
    private JTextArea outputArea;

    public MeralcoBillGUI() {
        setTitle("Meralco Bill Generator");
        setSize(600, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

        // Create input panel with GridLayout for input fields and summary
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));

        inputPanel.add(createInputRow("Account Number (6 digits):", accountNumberField = new JTextField(6)));
        inputPanel.add(createInputRow("First Name:", firstNameField = new JTextField(15)));
        inputPanel.add(createInputRow("Last Name:", lastNameField = new JTextField(15)));
        inputPanel.add(createInputRow("Billing Year (4 digits):", yearField = new JTextField(4)));
        inputPanel.add(createInputRow("Billing Month (2 digits):", monthField = new JTextField(2)));
        inputPanel.add(createInputRow("Billing Day (2 digits):", dayField = new JTextField(2)));
        inputPanel.add(createInputRow("Previous kWh Reading:", previousKwhField = new JTextField(6)));
        inputPanel.add(createInputRow("Present kWh Reading:", presentKwhField = new JTextField(6)));

        JButton calculateButton = new JButton("Calculate Bill");
        calculateButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        calculateButton.addActionListener(new CalculateButtonListener());
        inputPanel.add(calculateButton);

        add(inputPanel);

        // Create output panel
        outputArea = new JTextArea(10, 50);
        outputArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputArea);
        add(scrollPane);
    }

    private JPanel createInputRow(String labelText, JTextField textField) {
        JPanel panel = new JPanel(new BorderLayout());
        JLabel label = new JLabel(labelText);
        label.setPreferredSize(new Dimension(200, 30));
        panel.add(label, BorderLayout.WEST);
        textField.setMaximumSize(textField.getPreferredSize());
        panel.add(textField, BorderLayout.CENTER);
        return panel;
    }

    private class CalculateButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
                int accountNumber = Integer.parseInt(accountNumberField.getText());
                String firstName = firstNameField.getText();
                String lastName = lastNameField.getText();
                int year = Integer.parseInt(yearField.getText());
                int month = Integer.parseInt(monthField.getText());
                int day = Integer.parseInt(dayField.getText());
                double previousKwh = Double.parseDouble(previousKwhField.getText());
                double presentKwh = Double.parseDouble(presentKwhField.getText());

                double kwhUsage = presentKwh - previousKwh;
                double currentCons = kwhUsage * 11.3430;
                double billAmount = calculateBillAmount(currentCons);

                StringBuilder sb = new StringBuilder();
                sb.append("Meralco Bill\n");
                sb.append("Service Information:\n");
                sb.append("Account Number: ").append(accountNumber).append("\n");
                sb.append("Name: ").append(firstName).append(" ").append(lastName).append("\n");
                sb.append("Billing Date: ").append(month).append("/").append(day).append("/").append(year).append("\n");
                sb.append("Previous kWh Reading: ").append(previousKwh).append("\n");
                sb.append("Present kWh Reading: ").append(presentKwh).append("\n");
                sb.append("Electricity Usage (kWh): ").append(kwhUsage).append("\n");
                sb.append(String.format("Current Consumption Charge: Php %.2f%n", currentCons));
                sb.append(String.format("Transmission Charge: Php %.2f%n", getTransmissionCharge(currentCons)));
                sb.append(String.format("Distribution Charge: Php %.2f%n", getDistributionCharge(currentCons)));
                sb.append(String.format("Generation Charge: Php %.2f%n", getGenerationCharge(currentCons)));
                sb.append(String.format("Taxes: Php %.2f%n", getTaxes(currentCons)));
                sb.append(String.format("Other Charges: Php %.2f%n", getOtherCharges()));
                sb.append(String.format("Total Bill Amount: Php %.2f%n", billAmount));
                sb.append("Due Date: ").append(getDueDate(year, month, day)).append("\n");

                outputArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(MeralcoBillGUI.this, "Please enter valid input values.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private double calculateBillAmount(double currentCons) {
        double transmissionCharge = getTransmissionCharge(currentCons);
        double distributionCharge = getDistributionCharge(currentCons);
        double generationCharge = getGenerationCharge(currentCons);
        double taxes = getTaxes(currentCons);
        double otherCharges = getOtherCharges();
        return currentCons + transmissionCharge + distributionCharge + generationCharge + taxes + otherCharges;
    }

    private double getTransmissionCharge(double currentCons) {
        return currentCons * 0.101;
    }

    private double getDistributionCharge(double currentCons) {
        return currentCons * 0.175;
    }

    private double getGenerationCharge(double currentCons) {
        return currentCons * 0.55;
    }

    private double getTaxes(double currentCons) {
        return currentCons * 0.117;
    }

    private double getOtherCharges() {
        return 50.0;
    }

    private String getDueDate(int year, int month, int day) {
        int daysToAdd = 10;
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
            daysInMonth[1] = 29;
        }

        day += daysToAdd;

        while (day > daysInMonth[month - 1]) {
            day -= daysInMonth[month - 1];
            month++;
            if (month > 12) {
                month = 1;
                year++;
                if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
                    daysInMonth[1] = 29;
                } else {
                    daysInMonth[1] = 28;
                }
            }
        }

        return String.format("%02d/%02d/%02d", month, day, year);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new MeralcoBillGUI().setVisible(true);
        });
    }
}
